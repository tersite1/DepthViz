//
//  PLYExporter.swift
//  DepthViz
//
//  Created for code modularization
//

import Foundation
import Metal

/// PLY 파일 형식으로 Point Cloud를 내보내는 유틸리티 클래스
final class PLYExporter {
    
    /// Point Cloud 데이터를 PLY 형식의 문자열로 변환
    /// - Parameters:
    ///   - particlesBuffer: 포인트 데이터가 저장된 Metal 버퍼
    ///   - pointCount: 실제 포인트 개수
    /// - Returns: PLY 형식의 문자열 데이터
    static func exportToPLYString(particlesBuffer: MetalBuffer<ParticleUniforms>, pointCount: Int) -> String {
        var fileToWrite = ""
        
        // PLY 헤더 생성
        let headers = [
            "ply",
            "format ascii 1.0",
            "comment Generated by DepthViz - LiDAR Point Cloud Scanner",
            "element vertex \(pointCount)",
            "property float x",
            "property float y",
            "property float z",
            "property uchar red",
            "property uchar green",
            "property uchar blue",
            "element face 0",
            "property list uchar int vertex_indices",
            "end_header"
        ]
        
        for header in headers {
            fileToWrite += header
            fileToWrite += "\n"
        }
        
        // 포인트 데이터 추가
        for i in 0..<pointCount {
            let point = particlesBuffer[i]
            let colors = point.color
            
            let red = Int(colors.x * 255.0)
            let green = Int(colors.y * 255.0)
            let blue = Int(colors.z * 255.0)
            
            let pvValue = "\(point.position.x) \(point.position.y) \(point.position.z) \(red) \(green) \(blue)"
            fileToWrite += pvValue
            fileToWrite += "\n"
        }
        
        return fileToWrite
    }
    
    /// PLY 데이터를 파일로 저장
    /// - Parameters:
    ///   - plyString: PLY 형식의 문자열
    ///   - fileName: 저장할 파일 이름
    /// - Returns: 성공 여부
    static func savePLYToFile(plyString: String, fileName: String) -> Bool {
        guard let data = plyString.data(using: .utf8) else {
            print("Failed to convert PLY string to data")
            return false
        }
        
        let fileURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
            .appendingPathComponent("scanFiles")
            .appendingPathComponent(fileName)
        
        do {
            try data.write(to: fileURL)
            print("PLY file saved successfully at: \(fileURL.path)")
            return true
        } catch {
            print("Failed to save PLY file: \(error.localizedDescription)")
            return false
        }
    }
    
    /// PLY 파일 크기 계산
    /// - Parameter plyString: PLY 형식의 문자열
    /// - Returns: 파일 크기 문자열 (예: "2.5 MB")
    static func calculateFileSize(plyString: String) -> String {
        guard let data = plyString.data(using: .utf8) else {
            return "0 MB"
        }
        
        let bcf = ByteCountFormatter()
        bcf.allowedUnits = [.useMB]
        bcf.countStyle = .file
        return bcf.string(fromByteCount: Int64(data.count))
    }
}

