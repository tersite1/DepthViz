//
//  AdMobManager.swift
//  DepthViz
//
//  Google AdMob Í¥ëÍ≥† Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§
//

import UIKit
import GoogleMobileAds

/// AdMob Î∞∞ÎÑà Í¥ëÍ≥†Î•º Í¥ÄÎ¶¨ÌïòÎäî Îß§ÎãàÏ†Ä ÌÅ¥ÎûòÏä§
final class AdMobManager: NSObject {
    static let shared = AdMobManager()
    
    // MARK: - Í¥ëÍ≥† ID ÏÑ§Ï†ï
    #if DEBUG
    // ÌÖåÏä§Ìä∏Ïö© Í¥ëÍ≥† ID (Í∞úÎ∞ú Ï§ëÏóê ÏÇ¨Ïö©)
    private let bannerAdUnitID = "ca-app-pub-3940256099942544/2934735716" // Google ÌÖåÏä§Ìä∏ Î∞∞ÎÑà ID
    #else
    // Ïã§Ï†ú Í¥ëÍ≥† ID (Î∞∞Ìè¨Ïö©)
    private let bannerAdUnitID = "ca-app-pub-2516597008794244/6421361743"
    #endif
    
    private var bannerView: GADBannerView?
    
    private override init() {
        super.init()
    }
    
    /// AdMob SDK Ï¥àÍ∏∞Ìôî
    func initializeAdMob(completion: @escaping () -> Void) {
        GADMobileAds.sharedInstance().start { status in
            print("AdMob SDK initialized successfully")
            completion()
        }
    }
    
    /// Î∞∞ÎÑà Í¥ëÍ≥† ÏÉùÏÑ± Î∞è Î∞òÌôò
    /// - Parameters:
    ///   - viewController: Í¥ëÍ≥†Î•º ÌëúÏãúÌï† View Controller
    ///   - position: Í¥ëÍ≥† ÏúÑÏπò (top ÎòêÎäî bottom)
    /// - Returns: ÏÑ§Ï†ïÎêú GADBannerView
    func createBannerAd(for viewController: UIViewController, at position: BannerPosition = .bottom) -> GADBannerView {
        let bannerView = GADBannerView(adSize: GADAdSizeBanner)
        bannerView.adUnitID = bannerAdUnitID
        bannerView.rootViewController = viewController
        bannerView.delegate = self
        bannerView.translatesAutoresizingMaskIntoConstraints = false
        
        self.bannerView = bannerView
        
        // Í¥ëÍ≥† ÏöîÏ≤≠
        let request = GADRequest()
        bannerView.load(request)
        
        return bannerView
    }
    
    /// Î∞∞ÎÑà Í¥ëÍ≥†Î•º View ControllerÏóê Ï∂îÍ∞Ä
    /// - Parameters:
    ///   - viewController: Í¥ëÍ≥†Î•º Ï∂îÍ∞ÄÌï† View Controller
    ///   - position: Í¥ëÍ≥† ÏúÑÏπò
    func addBannerToViewController(_ viewController: UIViewController, at position: BannerPosition = .bottom) {
        let bannerView = createBannerAd(for: viewController, at: position)
        viewController.view.addSubview(bannerView)
        
        // Î∞∞ÎÑà Ï†úÏïΩÏ°∞Í±¥ ÏÑ§Ï†ï
        NSLayoutConstraint.activate([
            bannerView.centerXAnchor.constraint(equalTo: viewController.view.centerXAnchor),
            bannerView.widthAnchor.constraint(equalToConstant: GADAdSizeBanner.size.width),
            bannerView.heightAnchor.constraint(equalToConstant: GADAdSizeBanner.size.height)
        ])
        
        switch position {
        case .top:
            NSLayoutConstraint.activate([
                bannerView.topAnchor.constraint(equalTo: viewController.view.safeAreaLayoutGuide.topAnchor)
            ])
        case .bottom:
            NSLayoutConstraint.activate([
                bannerView.bottomAnchor.constraint(equalTo: viewController.view.safeAreaLayoutGuide.bottomAnchor)
            ])
        }
    }
    
    /// Î∞∞ÎÑà Í¥ëÍ≥† Ï†úÍ±∞
    func removeBanner() {
        bannerView?.removeFromSuperview()
        bannerView = nil
    }
}

// MARK: - GADBannerViewDelegate
extension AdMobManager: GADBannerViewDelegate {
    func bannerViewDidReceiveAd(_ bannerView: GADBannerView) {
        print("‚úÖ AdMob Banner loaded successfully")
    }
    
    func bannerView(_ bannerView: GADBannerView, didFailToReceiveAdWithError error: Error) {
        print("‚ùå AdMob Banner failed to load: \(error.localizedDescription)")
    }
    
    func bannerViewDidRecordImpression(_ bannerView: GADBannerView) {
        print("üìä AdMob Banner impression recorded")
    }
    
    func bannerViewWillPresentScreen(_ bannerView: GADBannerView) {
        print("üì± AdMob Banner will present screen")
    }
    
    func bannerViewWillDismissScreen(_ bannerView: GADBannerView) {
        print("üì± AdMob Banner will dismiss screen")
    }
    
    func bannerViewDidDismissScreen(_ bannerView: GADBannerView) {
        print("üì± AdMob Banner did dismiss screen")
    }
}

// MARK: - Supporting Types
enum BannerPosition {
    case top
    case bottom
}

